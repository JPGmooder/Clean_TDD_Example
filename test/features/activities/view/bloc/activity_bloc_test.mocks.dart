// Mocks generated by Mockito 5.4.2 from annotations
// in tddclean/test/features/activities/view/bloc/activity_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:typed_data' as _i12;

import 'package:dartz/dartz.dart' as _i6;
import 'package:hive/hive.dart' as _i3;
import 'package:hive/src/box/default_compaction_strategy.dart' as _i11;
import 'package:hive/src/box/default_key_comparator.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tddclean/core/error/failures.dart' as _i7;
import 'package:tddclean/features/activities/logic/entities/activity_entity.dart'
    as _i8;
import 'package:tddclean/features/activities/logic/repositories/activity_repository.dart'
    as _i2;
import 'package:tddclean/features/activities/logic/usecases/get_random_activity.dart'
    as _i4;
import 'package:tddclean/features/activities/logic/usecases/get_random_activity_by_name.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeActivityRepository_0 extends _i1.SmartFake
    implements _i2.ActivityRepository {
  _FakeActivityRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBox_1<E1> extends _i1.SmartFake implements _i3.Box<E1> {
  _FakeBox_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLazyBox_2<E1> extends _i1.SmartFake implements _i3.LazyBox<E1> {
  _FakeLazyBox_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetRandomActivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRandomActivity extends _i1.Mock implements _i4.GetRandomActivity {
  @override
  _i2.ActivityRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeActivityRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeActivityRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ActivityRepository);
  @override
  set repository(_i2.ActivityRepository? _repository) => super.noSuchMethod(
        Invocation.setter(
          #repository,
          _repository,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set params(dynamic _params) => super.noSuchMethod(
        Invocation.setter(
          #params,
          _params,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<_i6.Either<_i7.Failure, _i8.ActivityEntity>?> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i5.Future<_i6.Either<_i7.Failure, _i8.ActivityEntity>?>.value(),
        returnValueForMissingStub:
            _i5.Future<_i6.Either<_i7.Failure, _i8.ActivityEntity>?>.value(),
      ) as _i5.Future<_i6.Either<_i7.Failure, _i8.ActivityEntity>?>);
}

/// A class which mocks [GetRandomActivityByName].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRandomActivityByName extends _i1.Mock
    implements _i9.GetRandomActivityByName {
  @override
  _i2.ActivityRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeActivityRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeActivityRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ActivityRepository);
  @override
  String get params => (super.noSuchMethod(
        Invocation.getter(#params),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  set params(String? _params) => super.noSuchMethod(
        Invocation.setter(
          #params,
          _params,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<_i6.Either<_i7.Failure, _i8.ActivityEntity>?> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i5.Future<_i6.Either<_i7.Failure, _i8.ActivityEntity>?>.value(),
        returnValueForMissingStub:
            _i5.Future<_i6.Either<_i7.Failure, _i8.ActivityEntity>?>.value(),
      ) as _i5.Future<_i6.Either<_i7.Failure, _i8.ActivityEntity>?>);
}

/// A class which mocks [HiveInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveInterface extends _i1.Mock implements _i3.HiveInterface {
  @override
  void init(
    String? path, {
    _i3.HiveStorageBackendPreference? backendPreference =
        _i3.HiveStorageBackendPreference.native,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #init,
          [path],
          {#backendPreference: backendPreference},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<_i3.Box<E>> openBox<E>(
    String? name, {
    _i3.HiveCipher? encryptionCipher,
    _i3.KeyComparator? keyComparator = _i10.defaultKeyComparator,
    _i3.CompactionStrategy? compactionStrategy = _i11.defaultCompactionStrategy,
    bool? crashRecovery = true,
    String? path,
    _i12.Uint8List? bytes,
    String? collection,
    List<int>? encryptionKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #openBox,
          [name],
          {
            #encryptionCipher: encryptionCipher,
            #keyComparator: keyComparator,
            #compactionStrategy: compactionStrategy,
            #crashRecovery: crashRecovery,
            #path: path,
            #bytes: bytes,
            #collection: collection,
            #encryptionKey: encryptionKey,
          },
        ),
        returnValue: _i5.Future<_i3.Box<E>>.value(_FakeBox_1<E>(
          this,
          Invocation.method(
            #openBox,
            [name],
            {
              #encryptionCipher: encryptionCipher,
              #keyComparator: keyComparator,
              #compactionStrategy: compactionStrategy,
              #crashRecovery: crashRecovery,
              #path: path,
              #bytes: bytes,
              #collection: collection,
              #encryptionKey: encryptionKey,
            },
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i3.Box<E>>.value(_FakeBox_1<E>(
          this,
          Invocation.method(
            #openBox,
            [name],
            {
              #encryptionCipher: encryptionCipher,
              #keyComparator: keyComparator,
              #compactionStrategy: compactionStrategy,
              #crashRecovery: crashRecovery,
              #path: path,
              #bytes: bytes,
              #collection: collection,
              #encryptionKey: encryptionKey,
            },
          ),
        )),
      ) as _i5.Future<_i3.Box<E>>);
  @override
  _i5.Future<_i3.LazyBox<E>> openLazyBox<E>(
    String? name, {
    _i3.HiveCipher? encryptionCipher,
    _i3.KeyComparator? keyComparator = _i10.defaultKeyComparator,
    _i3.CompactionStrategy? compactionStrategy = _i11.defaultCompactionStrategy,
    bool? crashRecovery = true,
    String? path,
    String? collection,
    List<int>? encryptionKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #openLazyBox,
          [name],
          {
            #encryptionCipher: encryptionCipher,
            #keyComparator: keyComparator,
            #compactionStrategy: compactionStrategy,
            #crashRecovery: crashRecovery,
            #path: path,
            #collection: collection,
            #encryptionKey: encryptionKey,
          },
        ),
        returnValue: _i5.Future<_i3.LazyBox<E>>.value(_FakeLazyBox_2<E>(
          this,
          Invocation.method(
            #openLazyBox,
            [name],
            {
              #encryptionCipher: encryptionCipher,
              #keyComparator: keyComparator,
              #compactionStrategy: compactionStrategy,
              #crashRecovery: crashRecovery,
              #path: path,
              #collection: collection,
              #encryptionKey: encryptionKey,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.LazyBox<E>>.value(_FakeLazyBox_2<E>(
          this,
          Invocation.method(
            #openLazyBox,
            [name],
            {
              #encryptionCipher: encryptionCipher,
              #keyComparator: keyComparator,
              #compactionStrategy: compactionStrategy,
              #crashRecovery: crashRecovery,
              #path: path,
              #collection: collection,
              #encryptionKey: encryptionKey,
            },
          ),
        )),
      ) as _i5.Future<_i3.LazyBox<E>>);
  @override
  _i3.Box<E> box<E>(String? name) => (super.noSuchMethod(
        Invocation.method(
          #box,
          [name],
        ),
        returnValue: _FakeBox_1<E>(
          this,
          Invocation.method(
            #box,
            [name],
          ),
        ),
        returnValueForMissingStub: _FakeBox_1<E>(
          this,
          Invocation.method(
            #box,
            [name],
          ),
        ),
      ) as _i3.Box<E>);
  @override
  _i3.LazyBox<E> lazyBox<E>(String? name) => (super.noSuchMethod(
        Invocation.method(
          #lazyBox,
          [name],
        ),
        returnValue: _FakeLazyBox_2<E>(
          this,
          Invocation.method(
            #lazyBox,
            [name],
          ),
        ),
        returnValueForMissingStub: _FakeLazyBox_2<E>(
          this,
          Invocation.method(
            #lazyBox,
            [name],
          ),
        ),
      ) as _i3.LazyBox<E>);
  @override
  bool isBoxOpen(String? name) => (super.noSuchMethod(
        Invocation.method(
          #isBoxOpen,
          [name],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteBoxFromDisk(
    String? name, {
    String? path,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteBoxFromDisk,
          [name],
          {#path: path},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteFromDisk() => (super.noSuchMethod(
        Invocation.method(
          #deleteFromDisk,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  List<int> generateSecureKey() => (super.noSuchMethod(
        Invocation.method(
          #generateSecureKey,
          [],
        ),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as List<int>);
  @override
  _i5.Future<bool> boxExists(
    String? name, {
    String? path,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #boxExists,
          [name],
          {#path: path},
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  void resetAdapters() => super.noSuchMethod(
        Invocation.method(
          #resetAdapters,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void registerAdapter<T>(
    _i3.TypeAdapter<T>? adapter, {
    bool? internal = false,
    bool? override = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerAdapter,
          [adapter],
          {
            #internal: internal,
            #override: override,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isAdapterRegistered(int? typeId) => (super.noSuchMethod(
        Invocation.method(
          #isAdapterRegistered,
          [typeId],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void ignoreTypeId<T>(int? typeId) => super.noSuchMethod(
        Invocation.method(
          #ignoreTypeId,
          [typeId],
        ),
        returnValueForMissingStub: null,
      );
}
